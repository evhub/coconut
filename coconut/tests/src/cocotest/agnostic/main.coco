import sys

from .util import assert_raises
from .primary_1 import primary_test_1
from .primary_2 import primary_test_2


def test_asyncio() -> bool:
    import asyncio
    loop = asyncio.new_event_loop()
    loop.close()
    return True

def easter_egg_test() -> bool:
    import sys as _sys
    num_mods_0 = len(_sys.modules)
    import *  # type: ignore
    assert sys is _sys
    assert len(_sys.modules) > num_mods_0
    orig_name = __name__
    from * import *  # type: ignore
    assert __name__ == orig_name
    assert locals()["byteorder"] == _sys.byteorder
    return True

def mypy_test() -> bool:
    assert reveal_type(fmap) is fmap
    x: int = 10
    assert reveal_locals() is None
    return True

def package_test(outer_MatchError) -> bool:
    from __coconut__ import MatchError as coconut_MatchError
    assert MatchError is coconut_MatchError, (MatchError, coconut_MatchError)
    assert MatchError() `isinstance` outer_MatchError, (MatchError, outer_MatchError)
    assert outer_MatchError() `isinstance` MatchError, (outer_MatchError, MatchError)
    assert_raises((raise)$(outer_MatchError), MatchError)
    assert_raises((raise)$(MatchError), outer_MatchError)  # type: ignore
    def raises_outer_MatchError(obj=None):
        raise outer_MatchError("raises_outer_MatchError")
    match raises_outer_MatchError -> None in 10:
        assert False
    return True

def tco_func() = tco_func()

def print_dot() = print(".", end="", flush=True)

def run_main(outer_MatchError, test_easter_eggs=False) -> bool:
    """Asserts arguments and executes tests."""
    using_tco = "_coconut_tco" in globals() or "_coconut_tco" in locals()

    print_dot()  # ..
    assert primary_test_1() is True

    print_dot()  # ...
    assert primary_test_2() is True

    print_dot()  # ....
    from .specific import (
        non_py26_test,
        non_py32_test,
        py3_spec_test,
        py33_spec_test,
        py36_spec_test,
        py37_spec_test,
        py38_spec_test,
    )
    if sys.version_info >= (2, 7):
        assert non_py26_test() is True
    if not (3,) <= sys.version_info < (3, 3):
        assert non_py32_test() is True
    if sys.version_info >= (3,):
        assert py3_spec_test() is True
    if sys.version_info >= (3, 3):
        assert py33_spec_test() is True
    if sys.version_info >= (3, 6):
        assert py36_spec_test(tco=using_tco) is True
    if sys.version_info >= (3, 7):
        assert py37_spec_test() is True
    if sys.version_info >= (3, 8):
        assert py38_spec_test() is True

    print_dot()  # .....
    from .suite import suite_test, tco_test
    assert suite_test() is True

    print_dot()  # ......
    assert mypy_test() is True
    if using_tco:
        assert hasattr(tco_func, "_coconut_tco_func")
        assert tco_test() is True
    if not outer_MatchError.__module__.endswith("__main__"):
        assert package_test(outer_MatchError) is True

    print_dot()  # .......
    if sys.version_info < (3,):
        from .py2_test import py2_test
        assert py2_test() is True
    else:
        from .py3_test import py3_test
        assert py3_test() is True
        if sys.version_info >= (3, 5):
            from .py35_test import py35_test
            assert py35_test() is True
        if sys.version_info >= (3, 6):
            from .py36_test import py36_test
            assert py36_test() is True
        if sys.version_info >= (3, 8):
            from .py38_test import py38_test
            assert py38_test() is True
        if sys.version_info >= (3, 11):
            from .py311_test import py311_test
            assert py311_test() is True

    print_dot()  # ........
    from .target_sys_test import TEST_ASYNCIO, target_sys_test
    if TEST_ASYNCIO:
        assert test_asyncio() is True
    assert target_sys_test() is True

    print_dot()  # .........
    from .non_strict_test import non_strict_test
    assert non_strict_test() is True

    print_dot()  # ..........
    from . import tutorial  # noQA

    if test_easter_eggs:
        print_dot()  # ...........
        assert easter_egg_test() is True

    print("\n<success>")
    return True
