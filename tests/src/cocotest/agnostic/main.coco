import sys

def main_test():
    """Basic no-dependency tests."""
    assert "\n" == (

'''
'''

) == """
"""
    assert \(_coconut)
    assert "_coconut" in globals()
    assert "_coconut" not in locals()
    x = 5
    assert x == 5
    x == 6
    assert x == 5
    assert r"hello, world" == "hello, world" == "hello," " " "world"
    assert "\n " == """
 """
    assert "\\" "\"" == "\\\""
    assert """

""" == "\n\n"
    assert {"a":5}["a"] == 5
    a, = [24]
    assert a == 24
    assert set((1, 2, 3)) == {1, 2, 3}
    olist = [0,1,2]
    olist[1] += 4
    assert olist == [0,5,2]
    assert +5e+5 == +5 * +10**+5
    assert repr(3) == "3" == ascii(3)
    assert 5 |> (-)$(2) |> (*)$(2) == -6
    assert map(pow$(2), 0 `range` 5) |> list == [1,2,4,8,16]
    range10 = range(0,10)
    reiter_range10 = reiterable(range10)
    reiter_iter_range10 = reiterable(iter(range10))
    for iter1, iter2 in [
        tee(range10),
        tee(iter(range10)),
        (reiter_range10, reiter_range10),
        (reiter_iter_range10, reiter_iter_range10),
    ]:
        assert iter1$[2:8] |> list == [2, 3, 4, 5, 6, 7] == ($[])(iter2, slice(2, 8)) |> list, (iter1, iter2)
    \data = 5
    assert \data == 5
    \\data = 3
    \\assert data == 3
    \\def backslash_test():
        return (x) -> x
    assert \(1) == 1 == backslash_test()(1)
    assert True is (\(
            "hello"
        ) == "hello" == \(
            'hello'
        ))
    \\def multiline_backslash_test(
                                   x,
                                   y):
        return x + y
    assert multiline_backslash_test(1, 2) == 3
    \\ assert True
    class one_line_class: pass
    assert isinstance(one_line_class(), one_line_class)
    assert (.join)("")(["1", "2", "3"]) == "123"
    assert "" |> .join <| ["1","2","3"] == "123"
    assert "". <| "join" <| ["1","2","3"] == "123"
    assert 1 |> [1,2,3][] == 2 == 1 |> [1,2,3]$[]
    assert 1 |> "123"[] == "2" == 1 |> "123"$[]
    assert (| -1, 0, |) :: range(1, 5) |> list == [-1, 0, 1, 2, 3, 4]
    assert (| 1 |) :: (| 2 |) |> list == [1, 2]
    assert not isinstance(map((+)$(2), [1,2,3]), list)
    assert not isinstance(range(10), list)
    assert isinstance(10**100, int)
    assert chr(1000)
    assert 3 + 4i |> abs == 5
    assert 3.14j == 3.14i
    assert 10.j == 10.i
    assert 10j == 10i
    assert .001j == .001i
    assert 1e100j == 1e100i
    assert 3.14e-10j == 3.14e-10i
    {"text": text, "tags": [first] + rest} = {"text": "abc", "tags": [1, 2, 3]}
    assert text == "abc"
    assert first == 1
    assert rest == [2, 3]
    assert isinstance("a", str)
    assert isinstance(b"a", bytes)
    global (glob_a,
            glob_b)
    glob_a, glob_b = 0, 0
    assert glob_a == 0 == glob_b
    def set_globs(x):
        global (glob_a, glob_b)
        glob_a, glob_b = x, x
    set_globs(2)
    assert glob_a == 2 == glob_b
    def set_globs_again(x):
        global (glob_a, glob_b) = (x, x)
    set_globs_again(10)
    assert glob_a == 10 == glob_b
    assert (-)(1) == -1 == (-)$(1)(2)
    assert 3 `(<=)` 3
    assert range(10) |> consume |> list == []
    assert range(10) |> consume$(keep_last=2) |> list == [8, 9]
    i = int()
    try:
        i.x = 12
    except AttributeError as err:
        assert err
    else:
        assert False
    r = range(10)
    try:
        r.x = 12
    except AttributeError as err:
        assert err
    else:
        assert False
    import queue as q, builtins, email.mime.base
    assert q.Queue
    assert builtins.len([1, 1]) == 2
    assert email.mime.base
    from email.mime import base as mimebase
    assert mimebase
    from_err = TypeError()
    try:
        raise ValueError() from from_err
    except ValueError as err:
        assert err.__cause__ is from_err
    else:
        assert False
    data doc: "doc"
    data doc_:
        """doc"""
    assert doc.__doc__ == "doc" == doc_.__doc__
    assert 10000000.0 == 10_000_000.0
    assert (||) |> tuple == ()
    import collections
    import collections.abc
    assert isinstance([], collections.abc.Sequence)
    assert isinstance(range(1), collections.abc.Sequence)
    assert collections.defaultdict(int)[5] == 0
    assert len(range(10)) == 10
    assert range(4) |> reversed |> tuple == (3,2,1,0)
    assert range(5)[1:] |> tuple == (1,2,3,4) == range(5)$[1:] |> tuple
    assert range(10)[-3:-1] |> tuple == (7,8) == range(10)$[-3:-1] |> tuple
    assert map(abs, (1,-2,-5,2))$[:] |> tuple == (1,2,5,2)
    assert (|1,2|)$[-1] == 2
    assert (|0,1,2,3|)$[-2:] |> tuple == (2,3)
    assert (|0,1,2,3|)$[:-2] |> tuple == (0,1)
    assert map((+), (|10, 20|), (|1, 2|))$[-1] == 22 == map((+), (|10, 20|), (|1, 2|))[-1]
    assert map((x)->x+1, range(10**9))$[-1] == 10**9 == count()$[10**9]
    assert count()$[10:15] |> tuple == (10,11,12,13,14) == count()[10:15] |> tuple
    assert zip((1,2), (3,4)) |> tuple == ((1,3),(2,4)) == zip((1,2), (3,4))$[:] |> tuple
    assert zip((|10, 20|), (|1, 2|))$[-1] |> tuple == (20,2) == zip((|10, 20|), (|1, 2|))[-1] |> tuple
    assert zip(count(), count())$[10**9] |> tuple == (10**9, 10**9) == zip(count(), count())[10**9] |> tuple
    assert count(1.5, 0.5)$[0] == 1.5 == (1.5,2,2.5,3)$[0]
    assert count(1.5, 0.5)$[1:3] |> tuple == (2,2.5) == (1.5,2,2.5,3)$[1:3] |> tuple
    assert iter((0,1,2,3,4))$[::2] |> tuple == (0,2,4)
    assert iter((0,1,2,3,4))$[::-1] |> tuple == (4,3,2,1,0)
    assert {x:x for x in range(5)} == {0:0, 1:1, 2:2, 3:3, 4:4}
    match x = 12
    assert x == 12
    get_int = () -> int
    x is get_int() = 5
    assert x == 5
    class a(get_int()): pass
    assert isinstance(a(), int)
    assert map((+), range(5), range(6)) |> len == 5 == zip(range(5), range(6)) |> len
    assert map((-), range(5))._func(3) == -3
    assert map((-), range(5))._iters[0] |> tuple == range(5) |> tuple == zip(range(5), range(6))._iters[0] |> tuple
    assert repr(zip((0,1), (1,2))) == "zip((0, 1), (1, 2))"
    assert repr(map((-), range(5))).startswith("map(")
    assert repr(parallel_map((-), range(5))).startswith("parallel_map(")
    assert parallel_map((-), range(5)) |> tuple == (0, -1, -2, -3, -4) == parallel_map(map$((-)), (range(5),))$[0] |> tuple
    assert parallel_map(zip, (range(2),), (range(2),)) |> map$(tuple) |> tuple == (((0,0), (1,1)),)
    assert (range(0, 5), range(5, 10)) |*> map$(+) |> tuple == (5, 7, 9, 11, 13)
    assert parallel_map((*)$(2)..(+)$(1), range(5)) |> tuple == (2, 4, 6, 8, 10)
    assert repr(concurrent_map((-), range(5))).startswith("concurrent_map(")
    assert concurrent_map((-), range(5)) |> tuple == (0, -1, -2, -3, -4) == concurrent_map(map$((-)), (range(5),))$[0] |> tuple
    assert concurrent_map(zip, (range(2),), (range(2),)) |> map$(tuple) |> tuple == (((0,0), (1,1)),)
    assert (range(0, 5), range(5, 10)) |*> map$(+) |> tuple == (5, 7, 9, 11, 13)
    assert concurrent_map((*)$(2)..(+)$(1), range(5)) |> tuple == (2, 4, 6, 8, 10)
    assert 0 in range(1)
    assert range(1).count(0) == 1
    assert 2 in range(5)
    assert range(5).count(2) == 1
    assert 10 not in range(3)
    assert range(3).count(10) == 0
    assert 1 in range(1,2,3)
    assert range(1,2,3).count(1) == 1
    assert range(1,2,3).index(1) == 0
    assert range(1,2,3)[0] == 1
    assert range(1,5,3).index(4) == 1
    assert range(1,5,3)[1] == 4
    try:
        range(1,2,3).index(2)
    except ValueError as err:
        assert err
    else:
        assert False
    assert 0 in count()
    assert count().count(0) == 1
    assert -1 not in count()
    assert count().count(-1) == 0
    assert 1 not in count(5)
    assert count(5).count(1) == 0
    assert 2 not in count(1,2)
    assert count(1,2).count(2) == 0
    try:
        count(1,2).index(2)
    except ValueError as err:
        assert err
    else:
        assert False
    assert count(1,3).index(1) == 0
    assert count(1,3)[0] == 1
    assert count(1,3).index(4) == 1
    assert count(1,3)[1] == 4
    assert len <| map((x) -> x, [1, 2]) == 2
    assert repr("hello") == "'hello'" == ascii("hello")
    assert count(1,3) |> .index(1) == 0 == (.index(1))(count(1, 3))
    assert count(1).__copy__()$[0] == 1 == ($[])(count(1), 0)
    assert map((+), count(1), count(1)).__copy__()$[0] == 2
    assert zip(count(1), count(1)).__copy__()$[0] |> tuple == (1, 1)
    assert tee(count()) |> map$((t) -> isinstance(t, count)) |> all
    assert tee(range(10)) |> map$((t) -> isinstance(t, range)) |> all
    assert tee([1, 2, 3]) |> map$((t) -> isinstance(t, list)) |> all
    assert (-> 5)() == 5
    assert (-> _[0])([1, 2, 3]) == 1
    assert iter(range(10))$[-5:-8] |> list == [5, 6] == ($[])(iter(range(10)), slice(-5, -8)) |> list
    assert iter(range(10))$[-2:] |> list == [8, 9] == ($[])(iter(range(10)), slice(-2, None)) |> list
    assert (.[1])(range(1, 5)) == 2 == (.$[1])(range(1, 5))
    assert range(1, 5) |> .[1] == 2 == range(1, 5) |> .$[1]
    assert (.[:5])(range(10)) |> list == [0, 1, 2, 3, 4] == (.$[:5])(range(10)) |> list
    assert range(10) |> .[:5] |> list == [0, 1, 2, 3, 4] == range(10) |> .$[:5] |> list
    assert range(10) |> map$(def (x) -> y = x) |> list == [None]*10
    assert range(5) |> map$(def (x) -> yield x) |> map$(list) |> list == [[0], [1], [2], [3], [4]]
    def do_stuff(x) = True
    assert (def (x=3) -> do_stuff(x))() is True
    assert (def (x=4) -> do_stuff(x); x)() == 4
    assert (def (x=5) -> do_stuff(x);)() is None
    (def (x=6) -> do_stuff(x); assert x)()
    assert (def (x=7) -> do_stuff(x); assert x; yield x)() |> list == [7]
    assert (def -> do_stuff(_); assert _; _)(8) == 8
    assert (def (x=9) -> x)() == 9
    assert (def (x=10) -> do_stuff(x); x)() == 10
    assert (def -> def -> 11)()() == 11
    assert (def -> 12)() == 12 == (def -> 12)()
    assert ((def (x) -> -> x)(x) for x in range(5)) |> map$(-> _()) |> list == [0, 1, 2, 3, 4]
    herpaderp = 5
    def derp():
        herp = 10
        return (def -> herpaderp + herp)
    assert derp()() == 15
    data abc(xyz)
    data abc_(xyz: int)
    assert abc(10).xyz == 10 == abc_(10).xyz
    assert issubclass(abc, object)
    assert issubclass(abc_, object)
    assert isinstance(abc(10), object)
    assert isinstance(abc_(10), object)
    class aclass
    assert issubclass(aclass, object)
    assert isinstance(aclass(), object)
    assert tee((1,2)) |*> (is)
    assert tee(f{1,2}) |*> (is)
    assert (x -> 2 / x)(4) == 1/2
    match [a, *b, c] = range(10)
    assert a == 0
    assert b == [1, 2, 3, 4, 5, 6, 7, 8]
    assert c == 9
    match [a, *b, a] in range(10):
        assert False
    else:
        assert True
    a = 1; b = 1
    assert a == 1 == b
    assert count(5) == count(5)
    assert count(5) != count(3)
    assert {count(5): True}[count(5)]
    assert (def x -> x)(1) == 1
    assert (def ([x] + xs) -> x, xs) <| range(5) == (0, [1,2,3,4])
    s: str = "hello"
    assert s == "hello"
    assert pow$(?, 2)(3) == 9
    assert [] |> reduce$((+), ?, ()) == ()
    assert pow$(?, 2) |> repr == "<built-in function pow>$(?, 2)"
    assert parallel_map(pow$(?, 2), range(10)) |> tuple == (0, 1, 4, 9, 16, 25, 36, 49, 64, 81)
    assert pow$(?, 2).args == (None, 2)
    assert range(20) |> filter$((x) -> x < 5) |> reversed |> tuple == (4,3,2,1,0) == (0,1,2,3,4,5,6,7,8,9) |> filter$((x) -> x < 5) |> reversed |> tuple
    assert (range(10) |> map$((x) -> x) |> reversed) `isinstance` map

    assert range(10) |> reversed |> reversed |> tuple == range(10) |> tuple
    assert range(10) |> reversed |> len == 10
    assert range(10) |> reversed |> .[1] == 8
    assert range(10) |> reversed |> .[-1] == 0
    assert range(10) |> reversed |> .[:-1] |> tuple == range(1, 10) |> reversed |> tuple
    assert range(10) |> reversed |> .[1:] |> tuple == range(9) |> reversed |> tuple
    assert range(10) |> reversed |> .[2:-3] |> tuple == range(3, 8) |> reversed |> tuple
    assert 5 in (range(10) |> reversed)
    assert (range(10) |> reversed).count(3) == 1
    assert (range(10) |> reversed).count(10) == 0
    assert (range(10) |> reversed).index(3)

    range10 = range(10) |> list
    assert range10 |> reversed |> reversed == range10
    assert range10 |> reversed |> len == 10
    assert range10 |> reversed |> .[1] == 8
    assert range10 |> reversed |> .[-1] == 0
    assert range10 |> reversed |> .[:-1] |> tuple == range(1, 10) |> reversed |> tuple
    assert range10 |> reversed |> .[1:] |> tuple == range(9) |> reversed |> tuple
    assert range10 |> reversed |> .[2:-3] |> tuple == range(3, 8) |> reversed |> tuple
    assert 5 in (range10 |> reversed)
    assert (range10 |> reversed).count(3) == 1
    assert (range10 |> reversed).count(10) == 0
    assert (range10 |> reversed).index(3)

    assert range(1,11) |> groupsof$(1) |> list == [(1,),(2,),(3,),(4,),(5,),(6,),(7,),(8,),(9,),(10,)]
    assert range(1,11) |> groupsof$(2) |> list == [(1,2),(3,4),(5,6),(7,8),(9,10)]
    assert range(1,11) |> groupsof$(3) |> list == [(1,2,3),(4,5,6),(7,8,9),(10,)]
    assert range(1,11) |> groupsof$(4) |> list == [(1,2,3,4),(5,6,7,8),(9,10)]

    assert range(1, 3) |> enumerate |> list == [(0, 1), (1, 2)]
    assert range(2) |> enumerate$(start=1) |> list == [(1, 0), (2, 1)]
    assert range(10) |> enumerate |> len == 10
    assert range(10) |> enumerate |> .[1] == (1, 1)
    assert range(10) |> enumerate |> .[:1] |> list == [(0, 0)]
    assert range(10) |> enumerate |> .[1:3] |> list == [(1, 1), (2, 2)]
    assert range(10) |> enumerate |> .[-1:] |> list == [(9, 9)]
    assert range(3, 0, -1) |> tuple == (3, 2, 1)
    assert range(10, 0, -1)[9:1:-1] |> tuple == tuple(range(10, 0, -1))[9:1:-1]
    assert count(1)[1:] == count(2)
    assert reversed(x for x in range(10))[2:-3] |> tuple == range(3, 8) |> reversed |> tuple
    assert count(1, 2)[:3] |> tuple == (1, 3, 5)
    assert count(0.5, 0.5)[:3] |> tuple == (0.5, 1, 1.5)
    assert [1, 2, 3] |> fmap$(x -> x+1) == [2, 3, 4]
    assert (1, 2, 3) |> fmap$(x -> x+1) == (2, 3, 4)
    assert "abc" |> fmap$(x -> x+"!") == "a!b!c!"
    assert {1:"2", 2:"3"} |> fmap$((k, v) -> (k+1, v+"!")) == {2:"2!", 3:"3!"}
    assert {1, 2, 3} |> fmap$(-> _+1) == {2, 3, 4}
    assert [[1, 2, 3]] |> fmap$((+)$([0])) == [[0, 1, 2, 3]]
    assert range(3) |> fmap$(-> _+1) |> tuple == (1, 2, 3) == (|0, 1, 2|) |> fmap$(-> _+1) |> tuple
    assert issubclass(int, py_int)
    class pyobjsub(py_object)
    class objsub(\(object))
    assert not issubclass(pyobjsub, objsub)
    assert issubclass(objsub, object)
    assert issubclass(objsub, py_object)
    assert not issubclass(objsub, pyobjsub)
    pos = pyobjsub()
    os = objsub()
    assert not isinstance(pos, objsub)
    assert isinstance(os, objsub)
    assert isinstance(os, object)
    assert not isinstance(os, pyobjsub)
    assert [] == \([)\(])
    "a" + b + "c" = "abc"
    assert b == "b"
    "a" + bc = "abc"
    assert bc == "bc"
    ab + "c" = "abc"
    assert ab == "ab"
    match "a" + b in 5:
        assert False
    assert 400 == 10 |> x -> x*2 |> x -> x**2
    assert 100 == 10 |> x -> x*2 |> y -> x**2
    assert 3 == 1 `(x, y) -> x + y` 2
    match {"a": a, **rest} = {"a": 2, "b": 3}
    assert a == 2
    assert rest == {"b": 3}
    _ = None
    match {"a": a **_} = {"a": 4, "b": 5}
    assert a == 4
    assert _ is None
    a = 1,
    assert a == (1,)
    (x,) = a
    assert x == 1 == a[0]
    assert (10,)[0] == 10
    x, x = 1, 2
    assert x == 2
    from io import StringIO, BytesIO
    s = StringIO("derp")
    assert s.read() == "derp"
    b = BytesIO(b"herp")
    assert b.read() == b"herp"
    assert 1 ?? 2 == 1 == (??)(1, 2)
    assert None ?? 2 == 2 == (??)(None, 2)
    timeout: int? = None
    local_timeout: int? = 60
    global_timeout: int = 300
    def ret_timeout() -> int? = timeout
    def ret_local_timeout() -> int? = local_timeout
    def ret_global_timeout() -> int = global_timeout
    assert timeout ?? local_timeout ?? global_timeout == 60
    assert ret_timeout() ?? ret_local_timeout() ?? ret_global_timeout() == 60
    local_timeout = None
    assert timeout ?? local_timeout ?? global_timeout == 300
    assert ret_timeout() ?? ret_local_timeout() ?? ret_global_timeout() == 300
    timeout ??= 10
    assert timeout == 10
    global_timeout ??= 10
    assert global_timeout == 300
    assert (not None ?? True) is False
    assert 1 == None ?? 1
    assert 'foo' in None ?? ['foo', 'bar']
    assert 3 == 1 + (None ?? 2)
    requested_quantity: int? = 0
    default_quantity: int = 1
    price = 100
    assert 0 == (requested_quantity ?? default_quantity) * price
    assert range(10) |> .[1] .. .[1:] == 2 == range(10) |> .[1:] |> .[1]
    assert None?.herp(derp) is None
    assert None?[herp].derp is None
    assert None?(derp)[herp] is None
    assert None?$(herp)(derp) is None
    assert "a b c" == (" ". ?? "not gonna happen")("join")("abc")
    a: int[]? = None
    assert a is None
    assert range(5) |> iter |> reiterable |> .[1] == 1
    assert range(5) |> reiterable |> fmap$(-> _ + 1) |> list == [1, 2, 3, 4, 5]
    assert (+) ..*> (+) |> repr == "<built-in function add> ..*> <built-in function add>"
    assert scan((+), [1,2,3,4,5]) |> list == [1,3,6,10,15]
    assert scan((*), [1,2,3,4,5]) |> list == [1,2,6,24,120]
    input_data = [3, 4, 6, 2, 1, 9, 0, 7, 5, 8]
    assert input_data |> scan$(*) |> list == [3, 12, 72, 144, 144, 1296, 0, 0, 0, 0]
    assert input_data |> scan$(max) |> list == [3, 4, 6, 6, 6, 9, 9, 9, 9, 9]
    return True

def tco_func() = tco_func()

def main(*args):
    """Asserts arguments and executes tests."""
    assert all(args)
    print(".", end="")  # ..
    assert main_test()
    print(".", end="")  # ...
    if sys.version_info >= (2, 7):
        from .specific import non_py26_test
        assert non_py26_test()
    if not (3,) <= sys.version_info < (3, 3):
        from .specific import non_py32_test
        assert non_py32_test
    print(".", end="")  # ....
    from .suite import suite_test, tco_test
    assert suite_test()
    print(".", end="")  # .....
    if hasattr(tco_func, "_coconut_tco_func"):
        assert tco_test()
    print(".", end="")  # ......
    if sys.version_info < (3,):
        from .py2_test import py2_test
        assert py2_test()
    else:
        from .py3_test import py3_test
        assert py3_test()
        if sys.version_info >= (3, 5):
            from .py35_test import py35_test
            assert py35_test()
    print(".", end="")  # .......
    from . import tutorial
    print("\n<success>")
