from .util import *  # type: ignore

def suite_test():
    """Executes the main test suite."""
    assert 1 `plus` 1 == 2 == 1 `(+)` 1
    assert "1" `plus` "1" == "11" == "1" `(+)` "1"
    assert 3 `mod` 6 == 3 == 3 `(%)` 6
    assert 5 `mod` 4 == 1 == 5 `mod_` 4
    assert 5 `mod` 2 `plus` 2 == 3 == 5 `(%)` 2 `(+)` 2
    assert "11" `base` 2 == 3
    assert "10A" `int` 12 == 154
    assert ["1", "2"] `join_with` ", " == "1, 2"
    assert ["a","b","c"] `join_with` == "abc"
    assert {"a", 5} |> len == 2
    assert 5 |> swap2((-))$(2) |> (*)$(2) == 6 == 5 |> swap2_((-))$(2) |> (*)$(2)
    assert all(same((1, 2, 3), [1, 2, 3]))
    assert chain2((|1, 2|), (|3, 4|)) |> list == [1, 2, 3, 4]
    assert threeple$(1, 2)(3) == (1, 2, 3)
    assert 1 `range` 5 |> product == 24
    assert plus1(4) == 5 == plus1_(4)
    assert 2 `plus1` == 3 == plus1(2)
    assert plus1(plus1(5)) == 7 == (plus1..plus1)(5)
    assert `sqrt` 16 == 4 == `sqrt_` 16
    assert `square` 3 == 9
    def test_sqplus1_plus1sq(sqplus1, plus1sq, parallel=True):
        assert sqplus1(3) == 10 == (plus1..square)(3), sqplus1
        if parallel:
            assert parallel_map(sqplus1, range(3)) |> tuple == (1, 2, 5), sqplus1
        assert 3 `plus1sq` == 16, plus1sq
        assert 3 `sqplus1` == 10, sqplus1
    test_sqplus1_plus1sq(sqplus1_1, plus1sq_1)
    test_sqplus1_plus1sq(sqplus1_2, plus1sq_2, parallel=False)
    test_sqplus1_plus1sq(sqplus1_3, plus1sq_3)
    test_sqplus1_plus1sq(sqplus1_4, plus1sq_4)
    assert 3 |> plus1 |> square == 16 == 3 |> plus1_ |> square
    assert reduce((|>), [3, plus1, square]) == 16 == pipe(pipe(3, plus1), square)
    assert reduce((..), [sqrt, square, plus1])(3) == 4 == compose(compose(sqrt, square), plus1)(3)
    assert sum_([1,7,3,5]) == 16
    assert add([1,2,3], [10,20,30]) |> list == [11,22,33]
    assert add_([1,2,3], [10,20,30]) |> list == [11,22,33]
    assert zipsum([1,2,3], [10,20,30]) |> list == [11,22,33]
    assert clean("   ab cd ef   ") == "ab cd ef" == "   ab cd ef   " |> clean
    assert add2 <| 2 <| 3 == 5
    for qsort in [qsort1, qsort2, qsort3, qsort4, qsort5, qsort6, qsort7]:
        to_sort = rand_list(10)
        assert to_sort |> qsort |> tuple == to_sort |> sorted |> tuple, qsort
    assert repeat(3)$[2] == 3 == repeat_(3)$[2]
    assert sum_(repeat(1)$[:5]) == 5 == sum_(repeat_(1)$[:5])
    assert (sum_(takewhile((x)-> x<5, N()))
            == 10
            == dropwhile((>)$(0), (range(-10, 0) :: N()))$[:5] |> sum
            )
    assert "ABCDEFG" |> ((s) -> map(s[], (1, 3, 5))) |> sum_ == "BDF"  # type: ignore
    assert N()$[10:15] |> list == [10,11,12,13,14] == N_()$[10:15] |> list
    assert (N() |> takewhile$((>)$(5)) |> list
            == [0,1,2,3,4]
            == range(0,10)$[:5:] |> list
            )
    assert (range(-10, 0) :: N())$[5:15] |> sum == -5 == chain(range(-10, 0), N())$[5:15] |> sum
    assert add(repeat(1), N())$[:5] |> list == [1,2,3,4,5] == add_(repeat(1), N_())$[:5] |> list
    assert sum(N()$[5:]$[:5]) == 35 == sum(N_()$[5:]$[:5])
    assert N()$[](slice(5, 10)) |> list == [5,6,7,8,9] == list(range(0, 15))[](slice(5, 10))
    assert N()$[slice(5, 10)] |> list == [5,6,7,8,9] == list(range(0, 15))[slice(5, 10)]
    assert preN(range(-5, 0))$[1:10] |> list == [-4,-3,-2,-1,0,1,2,3,4]
    assert map_iter((*)$(2), N())$[:5] |> list == [0,2,4,6,8]
    assert N()$[:100] |> tuple == N_()$[:100] |> tuple == N__()$[:100] |> tuple
    assert 12 |> next_mul_of $(5) == 15
    assert collatz(27)
    assert preop(1, 2).add() == 3
    assert vector(3, 4) |> abs == 5 == vector_with_id(3, 4, 1) |> abs
    assert vector(1, 2) |> ((v) -> map(v., ("x", "y"))) |> tuple == (1, 2)  # type: ignore
    assert vector(3, 1) |> vector(1, 2).transform |> ((v) -> map(v[], (0, 1))) |> tuple == (4, 3)  # type: ignore
    assert vector(1, 2) |> vector(1, 2).__eq__
    assert not vector(1, 2) |> vector(3, 4).__eq__
    assert not (1, 2) |> vector(1, 2).__eq__
    assert vector(vector(4, 3)) == vector(4, 3)
    assert not vector(4, 3) != vector(4, 3)
    assert not vector(1, 2) == (1, 2)
    assert not vector(2, 3) != vector(2, 3)
    assert vector(1, 2) != (1, 2)
    assert triangle(3, 4, 5).is_right()
    assert (.)(triangle(3, 4, 5), "is_right")
    assert (.is_right())(triangle(3, 4, 5))
    assert triangle(3, 4, 5) |> .is_right()
    def test_factorial(factorial, test_none=True):
        assert factorial(0) == 1 == factorial(1)
        assert factorial(3) == 6
        if test_none:
            assert factorial(-1) is None
    test_factorial(factorial1)
    test_factorial(factorial2)
    test_factorial(factorial4)
    test_factorial(factorial5)
    test_factorial(fact, test_none=False)
    test_factorial(fact_, test_none=False)
    test_factorial(factorial, test_none=False)
    assert factorial3([2,3]) == [2,6] == factorial3((2,3))
    assert classify(()) == "empty tuple"
    assert classify([]) == "empty list"
    assert classify((1,)) == "singleton tuple"
    assert classify([1,1]) == "duplicate pair list of 1"
    assert classify((1,2)) == "pair tuple"
    assert classify([1,2,3]) == "list"
    assert classify((1,1,1)) == "tuple"
    assert classify({}) == "empty dict"
    assert classify({"a":1}) == "dict"
    assert classify({0}) == "set of 0" == classify(f{0})
    assert classify({0,1}) == "set" == classify(f{1})
    assert classify(s{}) == "empty set" == classify(f{})
    assert classify_sequence(()) == "empty"
    assert classify_sequence((1,)) == "singleton"
    assert classify_sequence((1, 1)) == "duplicate pair of 1"
    assert classify_sequence((1, 2)) == "pair"
    assert classify_sequence((1, 2, 3)) == "few"
    assert dictpoint({"x":1, "y":2}) == (1,2)
    assert dictpoint_({"x":1, "y":2}) == (1,2) == dictpoint__({"x":1, "y":2})
    assert map_((+)$(1), []) == []
    assert map_((+)$(1), ()) == ()
    assert map_((+)$(1), [0,1,2,3]) == [1,2,3,4]
    assert map_((+)$(1), (0,1,2,3)) == (1,2,3,4)
    assert duplicate_first1([1,2,3]) == [1,1,2,3]
    assert duplicate_first2([1,2,3]) |> list == [1,1,2,3] == duplicate_first3([1,2,3]) |> list
    assert one_to_five([1,2,3,4,5]) == [2,3,4]
    assert not one_to_five([0,1,2,3,4,5])
    assert one_to_five([1,5]) == []
    assert -4 == neg_square_u(2) ≠ 4 ∧ 0 ≤ neg_square_u(0) ≤ 0
    assert is_null(null1())
    assert is_null(null2())
    assert empty() |> depth == 0
    assert leaf(5) |> depth == 1
    assert node(leaf(2), node(empty(), leaf(3))) |> depth == 3
    assert maybes(5, square, plus1) == 26
    assert maybes(None, square, plus1) is None
    assert square <| 2 == 4
    assert (5, 3) |*> mod == 2 == mod <*| (5, 3)
    assert Just(5) <| square <| plus1 == Just(26)
    assert Nothing() <| square <| plus1 == Nothing()
    assert not Nothing() == ()
    assert not Nothing() != Nothing()
    assert Nothing() != ()
    assert not Just(1) == (1,)
    assert not Just(1) != Just(1)
    assert Just(1) != (1,)
    assert head_tail([1,2,3]) == (1, [2,3])
    assert init_last([1,2,3]) == ([1,2], 3)
    assert last_two([1,2,3]) == (2, 3) == last_two_([1,2,3])
    assert expl_ident(5) == 5
    assert mod$ <| 5 <| 3 == 2 == (%)$ <| 5 <| 3
    assert 5 |> dectest == 5
    try:
        raise ValueError()
    except TypeError, ValueError as err:
        assert err
    else:
        assert False
    assert delist2([1, 2]) == (1, 2) == delist2_([1, 2])
    assert tuple1(1) == (1,) == tuple1_(1)
    assert tuple2(1, 2) == (1, 2) == tuple2_(1, 2)
    assert htsplit([1,2,3]) == [1,[2,3]] == htsplit_([1,2,3])
    assert iadd(1, 2) == 3 == iadd_(1, 2)
    assert strmul("a", 3) == "aaa" == strmul_("a", 3)
    try:
        strmul("a", "b")
    except MatchError as err:
        assert err.pattern == "match def strmul(a is str, x is int):"
        assert err.value == ("a", "b")
    else:
        assert False
    laz = lazy()
    assert not laz.done
    lazl = laz.list()
    assert lazl$[:3] |> list == [1, 2, 3]
    assert not laz.done
    assert lazl |> list == [None]
    assert laz.done
    assert is_empty(iter(()))
    assert is_empty(())
    assert not is_empty([1])
    assert is_one(iter([1]))
    assert not is_one(iter(()))
    assert not is_one([])
    assert is_one([1])
    assert trilen(3, 4).h == 5 == datamaker(trilen)(5).h
    assert A().true()
    assert B().true()
    assert pt.__doc__
    out0 = grid() |> grid_trim$(xmax=5, ymax=5)
    assert out0 == [
     [pt(x=0, y=0), pt(x=0, y=1), pt(x=0, y=2), pt(x=0, y=3), pt(x=0, y=4)],
     [pt(x=1, y=0), pt(x=1, y=1), pt(x=1, y=2), pt(x=1, y=3), pt(x=1, y=4)],
     [pt(x=2, y=0), pt(x=2, y=1), pt(x=2, y=2), pt(x=2, y=3), pt(x=2, y=4)],
     [pt(x=3, y=0), pt(x=3, y=1), pt(x=3, y=2), pt(x=3, y=3), pt(x=3, y=4)],
     [pt(x=4, y=0), pt(x=4, y=1), pt(x=4, y=2), pt(x=4, y=3), pt(x=4, y=4)]
    ]
    out1 = grid() |> grid_map$(abs) |> grid_trim$(xmax=5, ymax=5)
    out1_ = grid() |> grid_trim$(xmax=5, ymax=5) |> parallel_grid_map$(abs) |> map$(list) |> list
    assert out1[0] == [0.0, 1.0, 2.0, 3.0, 4.0] == out1_[0]
    assert out1[1][0] == 1.0 == out1_[1][0]
    assert out1[2][0] == 2.0 == out1_[2][0]
    assert out1[3][0] == 3.0 == out1_[3][0]
    assert out1[3][4] == 5.0 == out1_[3][4]
    assert out1[4][0] == 4.0 == out1_[4][0]
    assert out1[4][3] == 5.0 == out1_[4][3]
    x = 5
    x |>= square
    y = square
    y <|= 5
    assert x == 25 == y
    x = (5, 3)
    x |*>= mod
    y = mod
    y <*|= (5, 3)
    assert x == 2 == y
    x = square
    x ..= (+)$(1)
    x <|= 4
    assert x == 25
    v = vector(1, 2)
    try:
        v.x = 3
    except AttributeError as err:
        assert err
    else:
        assert False
    try:
        v.new_attr = True
    except AttributeError as err:
        assert err
    else:
        assert False
    assert SHOPeriodTerminate([-1, 0], 0, {"epsilon": 1})
    assert add_int_or_str_1(2) == 3 == coercive_add(2, "1")
    assert add_int_or_str_1("2") == "21" == coercive_add("2", 1)
    assert still_ident(3) == 3
    assert not_ident(3) == "bar"
    assert pattern_abs(4) == 4 == pattern_abs_(4)
    assert pattern_abs(0) == 0 == pattern_abs_(0)
    assert pattern_abs(-4) == 4 == pattern_abs_(-4)
    assert vector(1, 2) |> (==)$(vector(1, 2))
    assert vector(1, 2) |> .__eq__(other=vector(1, 2))
    assert fibs()$[1:4] |> tuple == (1, 2, 3)
    assert fibs() |> takewhile$((i) -> i < 4000000 ) |> filter$((i) -> i % 2 == 0 ) |> sum == 4613732
    assert loop([1,2])$[:4] |> list == [1, 2] * 2
    assert (def -> mod)()(5, 3) == 2
    assert sieve((2, 3, 4, 5)) |> list == [2, 3, 5]
    assert 11 == double_plus_one(5)
    assert 15 == assign_func_1((*), 3, 5)
    assert 15 == assign_func_2((*), 3, 5)
    assert 20 == (..)(minus$(2), mul$(2), plus$(1))(10)
    assert 20 == minus$(2) .. mul$(2) .. plus$(1) <| 10
    assert does_raise_exc(raise_exc)
    assert ret_none(10) is None
    assert (2, 3, 5) |*> ret_args_kwargs$(1, ?, ?, 4, ?, *(6, 7), a="k") == ((1, 2, 3, 4, 5, 6, 7), {"a": "k"})
    assert anything_func() is None
    assert args_kwargs_func() is None
    assert x_is_int(4) == 4 == x_is_int(x=4)
    try:
        x_is_int(x="herp")
    except MatchError:
        pass
    else:
        assert False
    try:
        x_is_int()
    except MatchError:
        pass
    else:
        assert False
    assert x_as_y(x=2) == (2, 2) == x_as_y(y=2)
    assert x_y_are_int_gt_0(1, 2) == (1, 2) == x_y_are_int_gt_0(x=1, y=2)
    try:
        x_y_are_int_gt_0(1, y=0)
    except MatchError:
        pass
    else:
        assert False
    assert x_is_int_def_0() == 0 == x_is_int_def_0(x=0)
    try:
        x_is_int_def_0("derp")
    except MatchError:
        pass
    else:
        assert False
    assert head_tail_def_none() == (None, []) == head_tail_def_none([None])
    assert kwd_only_x_is_int_def_0() == 0 == kwd_only_x_is_int_def_0(x=0)
    try:
        kwd_only_x_is_int_def_0(1)
    except MatchError:
        pass
    else:
        assert False
    assert no_args_kwargs()
    try:
        no_args_kwargs(1)
    except MatchError:
        pass
    else:
        assert False
    try:
        no_args_kwargs(a=1)
    except MatchError:
        pass
    else:
        assert False
    a = altclass()
    assert a.func(1) == 1
    assert a.zero(10) == 0
    with Vars.using(globals()):
        assert var_one == 1
    try:
        var_one
    except NameError:
        assert True
    else:
        assert False
    assert Just(3) |> map$(-> _*2) |*> Just == Just(6) == Just(3) |> fmap$(-> _*2)
    assert Nothing() |> map$(-> _*2) |*> Nothing == Nothing() == Nothing() |> fmap$(-> _*2)
    assert Elems(1, 2, 3) != Elems(1, 2)
    assert map(plus1, (1, 2, 3)) |> fmap$(times2) |> repr == map(times2..plus1, (1, 2, 3)) |> repr
    assert reversed((1, 2, 3)) |> fmap$(plus1) |> repr == map(plus1, (1, 2, 3)) |> reversed |> repr
    assert identity[1:2, 2:3] == (slice(1, 2), slice(2, 3))
    assert identity |> .[1:2, 2:3] == (slice(1, 2), slice(2, 3))
    assert (.[1:2, 2:3])(identity) == (slice(1, 2), slice(2, 3))
    assert identity.method(*(1,), **{"a": 2}) == ((1,), {"a": 2})
    assert (.method(*(1,), **{"a": 2}))(identity) == ((1,), {"a": 2})
    assert identity |> .method(*(1,), **{"a": 2}) == ((1,), {"a": 2})
    assert container(1) == container(1)
    assert not container(1) != container(1)
    assert container(1) != container(2)
    assert not container(1) == container(2)
    assert container_(1) == container_(1)
    assert not container_(1) != container_(1)
    assert container_(1) != container_(2)
    assert not container_(1) == container_(2)
    t = Tuple_(1, 2)
    assert repr(t) == "Tuple_(*elems=(1, 2))"
    assert t.elems == (1, 2)
    assert isinstance(t.elems, tuple)
    assert t |> fmap$(-> _+1) == Tuple_(2, 3)
    Tuple_(x, y) = t
    assert x == 1 and y == 2
    p = Pred("name", 1, 2)
    p_ = Pred_("name", 1, 2)
    assert p.name == "name" == p_.name
    assert p.args == (1, 2) == p_.args
    assert repr(p) in ("Pred(name='name', *args=(1, 2))", "Pred(name=u'name', *args=(1, 2))")
    assert repr(p_) in ("Pred_(name='name', *args=(1, 2))", "Pred_(name=u'name', *args=(1, 2))")
    for Pred_test, p_test in [(Pred, p), (Pred_, p_)]:
        assert isinstance(p_test.args, tuple)
        Pred_test(name, *args) = p_test
        assert name == "name"
        assert args == (1, 2)
    q = Quant("name", "var", 1, 2)
    q_ = Quant_("name", "var", 1, 2)
    assert q.name == "name" == q_.name
    assert q.var == "var" == q_.var
    assert q.args == (1, 2) == q_.args
    assert repr(q) in ("Quant(name='name', var='var', *args=(1, 2))", "Quant(name=u'name', var=u'var', *args=(1, 2))")
    assert repr(q_) in ("Quant_(name='name', var='var', *args=(1, 2))", "Quant_(name=u'name', var=u'var', *args=(1, 2))")
    for Quant_test, q_test in [(Quant, q), (Quant_, q_)]:
        assert isinstance(q_test.args, tuple)
        Quant_test(name, var, *args) = q_test
        assert name == "name"
        assert var == "var"
        assert args == (1, 2)
    assert Pred(0, 1, 2) |> fmap$(-> _+1) == Pred(1, 2, 3)
    assert Pred_(0, 1, 2) |> fmap$(-> _+1) == Pred_(1, 2, 3)
    assert Quant(0, 1, 2) |> fmap$(-> _+1) == Quant(1, 2, 3)
    assert Quant_(0, 1, 2) |> fmap$(-> _+1) == Quant_(1, 2, 3)
    a = Nest()
    assert a.b.c.d == "data"
    assert (.b.c.d)(a) == "data"
    assert a |> .b.c.d == "data"
    assert a.b.c.m() == "method"
    assert a |> .b.c ..> .m() == "method"
    assert a |> .b.c |> .m() == "method"
    assert a?.b?.c?.m?() == "method"
    assert a.b.c.none?.derp.herp is None
    assert tco_chain([1, 2, 3]) |> list == ["last"]
    assert partition([1, 2, 3], 2) |> map$(tuple) |> list == [(1,), (3, 2)] == partition_([1, 2, 3], 2) |> map$(tuple) |> list
    assert myreduce((+), (1, 2, 3)) == 6
    assert recurse_n_times(10000)
    assert fake_recurse_n_times(10000)
    a = A()
    assert ((not)..a.true)() is False
    assert 10 % 4 % 3 == 2 == 10 `mod` 4 `mod` 3
    assert square_times2_plus1(3) == 19 == square_times2_plus1_(3)
    assert plus1_cube(2) == 27
    assert square ..> times2 ..> plus1 |> repr == square ..> (times2 ..> plus1) |> repr
    assert range(1, 5) |> map$(range) |> starmap$(toprint) |> tuple == ('0', '0 1', '0 1 2', '0 1 2 3')
    assert range(1, 5) |> map$(range) |> starmap$(toprint) |> fmap$(.strip(" 0")) |> tuple == ("", "1", "1 2", "1 2 3")
    assert () |> starmap$(toprint) |> len == 0
    assert [(1, 2)] |> starmap$(toprint) |> .[0] == "1 2"
    assert [(1, 2), (2, 3), (3, 4)] |> starmap$(toprint) |> .[1:] |> list == ["2 3", "3 4"]
    assert none_to_ten() == 10 == any_to_ten(1, 2, 3)
    assert int_map(plus1_, range(5)) == [1, 2, 3, 4, 5]
    assert still_ident.__doc__ == "docstring"
    with (
        context_produces(1) as one,
        context_produces(2) as two,
    ):
        assert one == 1
        assert two == 2
    with (context_produces(1)) as one:
        assert one == 1
    assert 1 ?? raise_exc() == 1
    try:
        assert None ?? raise_exc()
    except Exception as err:
        assert str(err) == "raise_exc"
    else:
        assert False
    for u, Point_test in [("", Point), ("_", Point_)]:
        p = Point_test()
        assert p.x == 0 == p.y
        assert repr(p) == "Point{u}(x=0, y=0)".format(u=u)
        p = Point_test(1)
        assert p.x == 1
        assert p.y == 0
        assert repr(p) == "Point{u}(x=1, y=0)".format(u=u)
        p = Point_test(2, 3)
        assert p.x == 2
        assert p.y == 3
        assert repr(p) == "Point{u}(x=2, y=3)".format(u=u)
    try:
        RadialVector()
    except TypeError:
        try:
            RadialVector_()
        except TypeError:
            pass
        else:
            assert False
    else:
        assert False
    rv = RadialVector(1)
    rv_ = RadialVector_(1)
    assert rv.mag == 1 == rv_.mag
    assert rv.angle == 0 == rv_.angle
    assert repr(rv) == "RadialVector(mag=1, angle=0)"
    assert repr(rv_) == "RadialVector_(mag=1, angle=0)"
    for u, ABC_test in [("", ABC), ("_", ABC_)]:
        try:
            ABC_test()
        except TypeError:
            pass
        else:
            assert False
        abc = ABC_test(2)
        assert abc.a == 2
        assert abc.b == 1
        assert abc.c == ()
        assert repr(abc) == "ABC{u}(a=2, b=1, *c=())".format(u=u)
        abc = ABC_test(3, 4, 5)
        assert abc.a == 3
        assert abc.b == 4
        assert abc.c == (5,)
        assert repr(abc) == "ABC{u}(a=3, b=4, *c=(5,))".format(u=u)
        abc = ABC_test(5, 6, 7, 8)
        assert abc.a == 5
        assert abc.b == 6
        assert abc.c == (7, 8)
        assert repr(abc) == "ABC{u}(a=5, b=6, *c=(7, 8))".format(u=u)
    v = vector2(3, 4)
    assert repr(v) == "vector2(x=3, y=4)"
    assert abs(v) == 5
    try:
        v.x = 2
    except AttributeError:
        pass
    else:
        assert False
    v = vector2()
    assert repr(v) == "vector2(x=0, y=0)"
    for obj in (factorial, iadd, collatz, recurse_n_times):
        assert obj.__doc__ == "this is a docstring", obj
    assert list_type((|1,2|)) == "at least 2"
    assert list_type((|1|)) == "at least 1"
    assert list_type((| |)) == "empty"
    cnt = counter()
    case cnt.inc():
        match 1:
            assert False
        match ():
            assert False
        match None:
            pass
    else:
        assert False
    assert cnt.count == 1
    assert plus1sq_all(1, 2, 3) |> list == [4, 9, 16] == plus1sq_all_(1, 2, 3) |> list
    assert sqplus1_all(1, 2, 3) |> list == [2, 5, 10] == sqplus1_all_(1, 2, 3) |> list
    assert square_times2_plus1_all(1, 2) |> list == [3, 9] == square_times2_plus1_all_(1, 2) |> list
    assert plus1_square_times2_all(1, 2) |> list == [8, 18] == plus1_square_times2_all_(1, 2) |> list
    assert plus1sqsum_all(1, 2) == 13 == plus1sqsum_all_(1, 2)
    assert sum_list_range(10) == 45
    assert sum2([3, 4]) == 7
    assert ridiculously_recursive(300) == 201666561657114122540576123152528437944095370972927688812965354745141489205495516550423117825 == ridiculously_recursive_(300)
    assert [fib(n) for n in range(16)] == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
    assert fib.cache_info().hits == 28
    assert (plus1 `(..)` x -> x*2)(4) == 9
    assert join_pairs1([(1, [2]), (1, [3])]).items() |> list == [(1, [2, 3])]
    assert join_pairs2([(1, [2]), (1, [3])]).items() |> list == [(1, [3, 2])]
    assert return_in_loop(10)
    assert methtest().meth(5) == 5
    def test_match_error_addpattern(x is int): raise MatchError()
    @addpattern(test_match_error_addpattern)
    def test_match_error_addpattern(x) = x
    try:
        test_match_error_addpattern(0)
    except MatchError as err:  # must not be caught inside addpattern
        assert err
    else:
        assert False
    return True

def tco_test():
    """Executes suite tests that rely on TCO."""
    assert is_even(5000) and is_odd(5001)
    assert is_even_(5000) and is_odd_(5001)
    return True
