import sys
import os

from coconut.__coconut__ import consume as coc_consume  # type: ignore

from coconut.constants import IPY, WINDOWS  # type: ignore
from coconut.exceptions import (
    CoconutSyntaxError,
    CoconutStyleError,
    CoconutSyntaxError,
    CoconutTargetError,
)  # type: ignore
from coconut.convenience import (
    CoconutException,
    cmd,
    version,
    setup,
    parse,
)

if IPY and not WINDOWS:
    from coconut.icoconut import CoconutKernel  # type: ignore
else:
    CoconutKernel = None  # type: ignore

def assert_raises(c, exc):
    """Test whether callable c raises an exception of type exc."""
    try:
        c()
    except exc:
        return True
    else:
        raise AssertionError("%s failed to raise exception %s" % (c, exc))

def main():
    if IPY:
        import coconut.highlighter  # type: ignore
    assert consume(range(10), keep_last=1)[0] == 9 == coc_consume(range(10), keep_last=1)[0]
    assert version() == version("num")
    assert version("name")
    assert version("spec")
    assert version("tag")
    assert version("-v")
    assert_raises(-> version("other"), CoconutException)
    assert_raises(def -> raise CoconutException("derp").syntax_err(), SyntaxError)
    setup()
    assert parse("abc") == parse("abc", "sys")
    assert parse("abc", "file")
    assert parse("abc", "package")
    assert parse("abc", "block") == "abc\n" == parse("abc", "single")
    assert parse("abc", "eval") == "abc\n" == parse(" abc", "eval")
    assert parse("abc", "debug") == "abc"
    assert parse("x |> map$(f)", "debug") == "map(f, x)"
    assert "_coconut" not in parse("a |> .b |> .m() |> f$(x) |> .[0]", "block")
    assert parse("abc # derp", "debug") == "abc  # derp"
    assert_raises(-> parse(" abc", "file"), CoconutException)
    assert_raises(-> parse("'"), CoconutException)
    assert_raises(-> parse("("), CoconutException)
    assert_raises(-> parse("\\("), CoconutException)
    assert_raises(-> parse("if a:\n  b\n c"), CoconutException)
    assert_raises(-> parse("$"), CoconutException)
    assert_raises(-> parse("_coconut"), CoconutException)
    assert parse("def f(x):\n \t pass")
    assert parse("lambda x: x")
    assert parse("u''")
    assert parse("def f(x):\\\n pass")
    assert parse("abc ")
    assert parse("abc # derp", "debug") == "abc  # derp"
    setup(line_numbers=True)
    assert parse("abc", "debug") == "abc  # line 1"
    setup(keep_lines=True)
    assert parse("abc", "debug") == "abc  # abc"
    setup(line_numbers=True, keep_lines=True)
    assert parse("abc", "debug") == "abc  # line 1: abc"
    setup()
    assert "prepattern" in parse("\n", mode="file")
    assert "datamaker" in parse("\n", mode="file")
    setup(strict=True)
    assert "prepattern" not in parse("\n", mode="file")
    assert "datamaker" not in parse("\n", mode="file")
    assert_raises(-> parse("def f(x):\n \t pass"), CoconutStyleError)
    assert_raises(-> parse("lambda x: x"), CoconutStyleError)
    assert_raises(-> parse("u''"), CoconutStyleError)
    assert_raises(-> parse("def f(x):\\\n pass"), CoconutStyleError)
    assert_raises(-> parse("abc "), CoconutStyleError)
    assert_raises(-> parse("abc", "file"), CoconutStyleError)
    assert_raises(-> parse("a=1;"), CoconutStyleError)
    assert_raises(-> parse("class derp(object)"), CoconutStyleError)
    setup()
    assert_raises(-> cmd("-f"), SystemExit)
    assert_raises(-> cmd("-pa ."), SystemExit)
    assert_raises(-> cmd("-n . ."), SystemExit)
    assert_raises(-> parse("f''"), CoconutException)
    assert_raises(-> parse("f$()"), CoconutSyntaxError)
    assert_raises(-> parse("f(*x, y)"), CoconutSyntaxError)
    assert_raises(-> parse("def f(x) = return x"), CoconutSyntaxError)
    assert_raises(-> parse("def f(x) =\n return x"), CoconutSyntaxError)
    setup(target="2.7")
    assert parse("from io import BytesIO", mode="debug") == "from io import BytesIO"
    assert_raises(-> parse("def f(*, x=None) = x"), CoconutTargetError)
    setup(target="3.6")
    assert parse("f''")
    assert parse("def f(*, x=None) = x")
    if CoconutKernel is not None:
        k = CoconutKernel()
        exec_result = k.do_execute("derp = pow$(?, 2)", False, True, {"two": "(+)(1, 1)"}, True)
        assert exec_result["status"] == "ok"
        assert exec_result["user_expressions"]["two"]["data"]["text/plain"] == "2"
        assert k.do_is_complete("if abc:")["status"] == "incomplete"
        assert k.do_is_complete("f(")["status"] == "incomplete"
        assert k.do_is_complete("abc")["status"] == "complete"
        inspect_result = k.do_inspect("derp", 4, 0)
        assert inspect_result["status"] == "ok"
        assert inspect_result["found"]
        assert inspect_result["data"]["text/plain"]
        complete_result = k.do_complete("der", 1)
        assert complete_result["status"] == "ok"
        assert "derp" in complete_result["matches"]
        assert complete_result["cursor_start"] == 0
        assert complete_result["cursor_end"] == 1
        assert not complete_result["metadata"]
        keyword_complete_result = k.do_complete("ma", 1)
        assert keyword_complete_result["status"] == "ok"
        assert "match" in keyword_complete_result["matches"]
        assert "map" in keyword_complete_result["matches"]
        assert keyword_complete_result["cursor_start"] == 0
        assert keyword_complete_result["cursor_end"] == 1
        assert not keyword_complete_result["metadata"]
    print("<success>")

if __name__ == "__main__":
    print("Expect Coconut errors below from running extras:")
    print("(but make sure you get a <success> after them)")
    main()
