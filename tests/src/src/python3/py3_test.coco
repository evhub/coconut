def py3_test():
    """Performs Python-3-specific tests."""
    def p1(x: int) -> int:
        return x+1
    assert p1(2) == 3
    x = 5
    assert x == 5
    def set_x(y):
        nonlocal x
        x = y
    set_x(3)
    assert x == 3
    def set_x_again(y):
        nonlocal x = y
    set_x_again(10)
    assert x == 10
    assert {x:x for x in range(5)} == {0:0, 1:1, 2:2, 3:3, 4:4}
    def head_tail(l):
        head, *tail = l
        return head, tail
    assert head_tail((|1, 2, 3|)) == (1, [2, 3])
    class metaA(type):
        def __instancecheck__(cls, inst):
            return True
    class A(metaclass=metaA): pass
    assert isinstance(A(), A)
    assert isinstance("", A)
    assert isinstance(5, A)
    assert py3_map((x) -> x+1, range(4)) |> tuple == (1, 2, 3, 4)
    assert py3_zip(range(3), range(3)) |> tuple == ((0, 0), (1, 1), (2, 2))
    class B(*()): pass
    assert isinstance(B(), B)
    e = exec
    test = {}
    e("a=1", test)
    assert test["a"] == 1
    def keyword_only(*, a) = a
    assert keyword_only(a=10) == 10
    return True
