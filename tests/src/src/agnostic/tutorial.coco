def factorial(n):
    """Compute n! where n is an integer >= 0."""
    if n `isinstance` int and n >= 0:
        acc = 1
        for x in range(1, n+1):
            acc *= x
        return acc
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

# Test cases:
try:
    -1 |> factorial
except TypeError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except TypeError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def factorial(n):
    """Compute n! where n is an integer >= 0."""
    case n:
        match 0:
            return 1
        match _ is int if n > 0:
            return n * factorial(n-1)
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

# Test cases:
try:
    -1 |> factorial
except TypeError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except TypeError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def factorial(n):
    """Compute n! where n is an integer >= 0."""
    try:
        0 = n # destructuring assignment
    except MatchError:
        try:
            _ is int = n # also destructuring assignment
        except MatchError:
            pass
        else: if n > 0: # in Coconut, if, match, and try are allowed after else
            return n * factorial(n-1)
    else:
        return 1
    raise TypeError("the argument to factorial must be an integer >= 0")

# Test cases:
try:
    -1 |> factorial
except TypeError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except TypeError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def factorial(n, acc=1):
    """Compute n! where n is an integer >= 0."""
    case n:
        match 0:
            return acc
        match _ is int if n > 0:
            return factorial(n-1, acc*n)
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

# Test cases:
try:
    -1 |> factorial
except TypeError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except TypeError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def factorial(n):
    """Compute n! where n is an integer >= 0."""
    case n:
        match 0:
            return 1
        match _ is int if n > 0:
            return range(1, n+1) |> reduce$(*)
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

# Test cases:
try:
    -1 |> factorial
except TypeError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except TypeError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def factorial(0):
    return 1

@addpattern(factorial)
def factorial(n is int if n > 0):
    """Compute n! where n is an integer >= 0."""
    return range(1, n+1) |> reduce$(*)

# Test cases:
try:
    -1 |> factorial
except MatchError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except MatchError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def factorial(0) = 1

@addpattern(factorial)
def factorial(n is int if n > 0):
    """Compute n! where n is an integer >= 0."""
    return n * factorial(n - 1)

# Test cases:
try:
    -1 |> factorial
except MatchError:
    assert True
else:
    assert False
try:
    0.5 |> factorial
except MatchError:
    assert True
else:
    assert False
assert 0 |> factorial == 1
assert 3 |> factorial == 6

def quick_sort([]):
    return []

@addpattern(quick_sort)
def quick_sort([head] + tail):
    """Sort the input sequence using the quick sort algorithm."""
    return (quick_sort([x for x in tail if x < head])
        + [head]
        + quick_sort([x for x in tail if x >= head]))

# Test cases:
assert [] |> quick_sort == []
assert [3] |> quick_sort == [3]
assert [0,1,2,3,4] |> quick_sort == [0,1,2,3,4]
assert [4,3,2,1,0] |> quick_sort == [0,1,2,3,4]
assert [3,0,4,2,1] |> quick_sort == [0,1,2,3,4]

def quick_sort(l):
    """Sort the input iterator, using the quick sort algorithm, and without using any data until necessary."""
    match [head] :: tail in l:
        tail, tail_ = tee(tail)
        yield from (quick_sort((x for x in tail if x <= head))
            :: (head,)
            :: quick_sort((x for x in tail_ if x > head))
            )

# Test cases:
assert [] |> quick_sort |> list == []
assert [3] |> quick_sort |> list == [3]
assert [0,1,2,3,4] |> quick_sort |> list == [0,1,2,3,4]
assert [4,3,2,1,0] |> quick_sort |> list == [0,1,2,3,4]
assert [3,0,4,2,1] |> quick_sort |> list == [0,1,2,3,4]

data vector2(x, y):
    """Immutable 2-vector."""
    def __abs__(self):
        """Return the magnitude of the 2-vector."""
        return (self.x**2 + self.y**2)**0.5

# Test cases:
assert vector2(1, 2) |> repr == "vector2(x=1, y=2)"
assert vector2(3, 4) |> abs == 5
v = vector2(2, 3)
try:
    v.x = 7
except AttributeError:
    assert True
else:
    assert False

data vector(pts):
    """Immutable n-vector."""
    def __new__(cls, *pts):
        """Create a new vector from the given pts."""
        if len(pts) == 1 and pts[0] `isinstance` vector:
            return pts[0] # vector(v) where v is a vector should return v
        else:
            return pts |> tuple |> datamaker(cls) # accesses base constructor

# Test cases:
assert vector(1, 2, 3) |> repr == "vector(pts=(1, 2, 3))"
assert vector(4, 5) |> vector |> repr == "vector(pts=(4, 5))"

data vector(pts):
    """Immutable n-vector."""
    def __new__(cls, *pts):
        """Create a new vector from the given pts."""
        if len(pts) == 1 and pts[0] `isinstance` vector:
            return pts[0] # vector(v) where v is a vector should return v
        else:
            return pts |> tuple |> datamaker(cls) # accesses base constructor
    def __abs__(self):
        """Return the magnitude of the vector."""
        return self.pts |> map$((x) -> x**2) |> sum |> ((s) -> s**0.5)
    def __add__(self, other):
        """Add two vectors together."""
        vector(other_pts) = other
        assert len(other_pts) == len(self.pts)
        return map((+), self.pts, other_pts) |*> vector
    def __sub__(self, other):
        """Subtract one vector from another."""
        vector(other_pts) = other
        assert len(other_pts) == len(self.pts)
        return map((-), self.pts, other_pts) |*> vector
    def __neg__(self):
        """Retrieve the negative of the vector."""
        return self.pts |> map$((-)) |*> vector
    def __eq__(self, other):
        """Compare whether two vectors are equal."""
        match vector(=self.pts) in other:
            return True
        else:
            return False
    def __mul__(self, other):
        """Scalar multiplication and dot product."""
        match vector(other_pts) in other:
            assert len(other_pts) == len(self.pts)
            return map((*), self.pts, other_pts) |> sum # dot product
        else:
            return self.pts |> map$((*)$(other)) |*> vector # scalar multiplication
    def __rmul__(self, other):
        """Necessary to make scalar multiplication commutative."""
        return self * other

# Test cases:
assert vector(1, 2, 3) |> repr == "vector(pts=(1, 2, 3))"
assert vector(4, 5) |> vector |> repr == "vector(pts=(4, 5))"
assert vector(3, 4) |> abs == 5
assert vector(1, 2) + vector(2, 3) |> repr == "vector(pts=(3, 5))"
assert vector(2, 2) - vector(0, 1) |> repr == "vector(pts=(2, 1))"
assert -vector(1, 3) |> repr == "vector(pts=(-1, -3))"
assert (vector(1, 2) == "string") is False
assert (vector(1, 2) == vector(3, 4)) is False
assert (vector(2, 4) == vector(2, 4)) is True
assert 2*vector(1, 2) |> repr == "vector(pts=(2, 4))"
assert vector(1, 2) * vector(1, 3) == 7

def diagonal_line(n) = range(n+1) |> map$((i) -> (i, n-i))

assert diagonal_line(0) `isinstance` (list, tuple) is False
assert diagonal_line(0) |> list == [(0, 0)]
assert diagonal_line(1) |> list == [(0, 1), (1, 0)]

def linearized_plane(n=0) = diagonal_line(n) :: linearized_plane(n+1)

# Note: these tests use $[] notation, which we haven't introduced yet
#  but will introduce later in this case study; for now, just run the
#  tests, and make sure you get the same result as is in the comment
assert linearized_plane()$[0] == (0, 0)
assert linearized_plane()$[:3] |> list == [(0, 0), (0, 1), (1, 0)]

def vector_field() = linearized_plane() |> map$((xy) -> vector(*xy))

# You'll need to bring in the vector class from earlier to make these work
assert vector_field()$[0] |> repr == "vector(pts=(0, 0))"
assert vector_field()$[2:3] |> list |> repr == "[vector(pts=(1, 0))]"

data vector(pts):
    """Immutable n-vector."""
    def __new__(cls, *pts):
        """Create a new vector from the given pts."""
        if len(pts) == 1 and pts[0] `isinstance` vector:
            return pts[0] # vector(v) where v is a vector should return v
        else:
            return pts |> tuple |> datamaker(cls) # accesses base constructor
    def __abs__(self):
        """Return the magnitude of the vector."""
        return self.pts |> map$((x) -> x**2) |> sum |> ((s) -> s**0.5)
    def __add__(self, other):
        """Add two vectors together."""
        vector(other_pts) = other
        assert len(other_pts) == len(self.pts)
        return map((+), self.pts, other_pts) |*> vector
    def __sub__(self, other):
        """Subtract one vector from another."""
        vector(other_pts) = other
        assert len(other_pts) == len(self.pts)
        return map((-), self.pts, other_pts) |*> vector
    def __neg__(self):
        """Retrieve the negative of the vector."""
        return self.pts |> map$((-)) |*> vector
    def __eq__(self, other):
        """Compare whether two vectors are equal."""
        match vector(=self.pts) in other:
            return True
        else:
            return False
    def __mul__(self, other):
        """Scalar multiplication and dot product."""
        match vector(other_pts) in other:
            assert len(other_pts) == len(self.pts)
            return map((*), self.pts, other_pts) |> sum # dot product
        else:
            return self.pts |> map$((*)$(other)) |*> vector # scalar multiplication
    def __rmul__(self, other):
        """Necessary to make scalar multiplication commutative."""
        return self * other

def diagonal_line(n) = range(n+1) |> map$((i) -> (i, n-i))
def linearized_plane(n=0) = diagonal_line(n) :: linearized_plane(n+1)
def vector_field() = linearized_plane() |> map$((xy) -> vector(*xy))

# Test cases:
assert diagonal_line(0) `isinstance` (list, tuple) is False
assert diagonal_line(0) |> list == [(0, 0)]
assert diagonal_line(1) |> list == [(0, 1), (1, 0)]
assert linearized_plane()$[0] == (0, 0)
assert linearized_plane()$[:3] |> list == [(0, 0), (0, 1), (1, 0)]
assert vector_field()$[0] |> repr == "vector(pts=(0, 0))"
assert vector_field()$[2:3] |> list |> repr == "[vector(pts=(1, 0))]"

import math # necessary for math.acos in .angle

data vector(pts):
    """Immutable n-vector."""
    def __new__(cls, *pts):
        """Create a new vector from the given pts."""
        if len(pts) == 1 and pts[0] `isinstance` vector:
            return pts[0] # vector(v) where v is a vector should return v
        else:
            return pts |> tuple |> datamaker(cls) # accesses base constructor
    def __abs__(self):
        """Return the magnitude of the vector."""
        return self.pts |> map$((x) -> x**2) |> sum |> ((s) -> s**0.5)
    def __add__(self, other):
        """Add two vectors together."""
        vector(other_pts) = other
        assert len(other_pts) == len(self.pts)
        return map((+), self.pts, other_pts) |*> vector
    def __sub__(self, other):
        """Subtract one vector from another."""
        vector(other_pts) = other
        assert len(other_pts) == len(self.pts)
        return map((-), self.pts, other_pts) |*> vector
    def __neg__(self):
        """Retrieve the negative of the vector."""
        return self.pts |> map$((-)) |*> vector
    def __eq__(self, other):
        """Compare whether two vectors are equal."""
        match vector(=self.pts) in other:
            return True
        else:
            return False
    def __mul__(self, other):
        """Scalar multiplication and dot product."""
        match vector(other_pts) in other:
            assert len(other_pts) == len(self.pts)
            return map((*), self.pts, other_pts) |> sum # dot product
        else:
            return self.pts |> map$((*)$(other)) |*> vector # scalar multiplication
    def __rmul__(self, other):
        """Necessary to make scalar multiplication commutative."""
        return self * other
    # New one-line functions necessary for finding the angle between vectors:
    def __truediv__(self, other) = self.pts |> map$((x) -> x/other) |*> vector
    def unit(self) = self / abs(self)
    def angle(self, other is vector) = math.acos(self.unit() * other.unit())

# Test cases:
assert vector(3, 4) / 1 |> repr == "vector(pts=(3.0, 4.0))"
assert vector(2, 4) / 2 |> repr == "vector(pts=(1.0, 2.0))"
assert vector(0, 1).unit() |> repr == "vector(pts=(0.0, 1.0))"
assert vector(5, 0).unit() |> repr == "vector(pts=(1.0, 0.0))"
assert vector(2, 0).angle(vector(3, 0)) == 0.0
assert vector(1, 0).angle(vector(0, 2)) == math.pi/2
try:
    vector(1, 2).angle(5)
except MatchError:
    assert True
else:
    assert False
